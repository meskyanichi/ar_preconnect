{"name":"ActiveRecord Preconnect","tagline":"Adds the `preconnect!` method to `ActiveRecord::ConnectionAdapters::ConnectionPool`. With it you can eagerly connect all connection pool connections to the database, rather than lazily.","body":"## ActiveRecord Preconnect\r\n\r\n[![Gem Version](https://badge.fury.io/rb/ar_preconnect.svg)](https://badge.fury.io/rb/ar_preconnect)\r\n\r\nThis library adds the `preconnect!` method to `ActiveRecord::ConnectionAdapters::ConnectionPool`. Use this when you want all of your connections in your connection pool to eagerly connect to the database, rather than lazily.\r\n\r\n### Why\r\n\r\nWhen using [Postgres] on [Heroku] with [PGBouncer] you can run into situations where your [process will hang indefinitely]. This issue seems to occur when using ActiveRecord, Sequel and potentially other database mappers in a multi-threaded environment. \r\n\r\nThe solution in Sequel is to set the `preconnect` option to `true`. This option tells Sequel to open all database connection eagerly, rather than lazily, and avoids potential deadlocks. I couldn't find an equivalent option in ActiveRecord so I wrote this small library to provide a method, enabling you to achieve the same behavior.\r\n\r\n\r\n### Installation\r\n\r\nAdd the library to your Gemfile:\r\n\r\n```rb\r\ngem \"ar_preconnect\"\r\n```\r\n\r\n\r\n### Usage\r\n\r\nUse the `preconnect!` method in any threaded environment. Here's a Sidekiq example:\r\n\r\n\r\n```rb\r\nSidekiq.configure_server do |config|\r\n  ActiveRecord::Base.connection.pool.preconnect!\r\nend\r\n```\r\n\r\nNow, during the Sidekiq (server) configuration process, all of the connections in the ActiveRecord connection pool will establish a connection with the database, and will be ready before Sidekiq actually starts working.\r\n\r\nYou might also want to consider preconnecting with multi-threaded app servers such as [Passenger] and [Puma], or any other multi-threaded process.\r\n\r\nSingle-threaded app servers and worker libraries such as [Unicorn] and [Delayed Job] should use a connection pool of 1, won't need PGBouncer, and thus preconnection isn't necessary.\r\n\r\n\r\n### Author / License\r\n\r\nReleased under the [MIT License] by [Michael van Rooijen].\r\n\r\n[Postgres]: http://www.postgresql.org\r\n[Heroku]: https://www.heroku.com\r\n[PGBouncer]: https://pgbouncer.github.io\r\n[Sidekiq]: http://sidekiq.org\r\n[Passenger]: https://www.phusionpassenger.com\r\n[Unicorn]: http://unicorn.bogomips.org\r\n[Puma]: http://puma.io\r\n[Delayed Job]: https://github.com/collectiveidea/delayed_job/\r\n[process will hang indefinitely]: https://github.com/heroku/heroku-buildpack-pgbouncer/issues/29\r\n[MIT License]: https://github.com/meskyanichi/ar_preconnect/blob/master/LICENSE\r\n[Michael van Rooijen]: http://michael.vanrooijen.io\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}