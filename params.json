{"name":"ActiveRecord Preconnect","tagline":"Adds the `preconnect!` method to `ActiveRecord::ConnectionAdapters::ConnectionPool`. With it you can eagerly connect all connection pool connections to the database, rather than lazily.","body":"## ActiveRecord Preconnect\r\n\r\nThis library adds the `preconnect!` method to `ActiveRecord::ConnectionAdapters::ConnectionPool`. Use this when you want all of your connections in your connection pool to eagerly connect to the database, rather than lazily.\r\n\r\n\r\n### Why\r\n\r\nWhen using [Postgres] on [Heroku] with [PGBouncer] you can run into situations where your [process will hang indefinitely]. This issue occurs when using ActiveRecord, Sequel and potentially other database mappers.\r\n\r\nThe solution in Sequel is to set the `preconnect` option to `true`. This option tells Sequel to open all database connection eagerly, rather than lazily, and avoids potential deadlocks. I couldn't find an equivalent option in ActiveRecord so I wrote this small library to provide a method to do so.\r\n\r\n\r\n### Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```rb\r\ngem \"ar_preconnect\"\r\n```\r\n\r\n### Usage\r\n\r\nWith [Sidekiq]:\r\n\r\n```rb\r\n# ./config/initializers/sidekiq.rb\r\nSidekiq.configure_server do |config|\r\n  ActiveRecord::Base.connection.pool.preconnect!\r\nend\r\n```\r\n\r\nWith [Passenger] in cluster-mode.\r\n\r\n```rb\r\n# ./config/initializers/passenger.rb\r\nif defined?(PhusionPassenger)\r\n  PhusionPassenger.on_event(:starting_worker_process) do |forked|\r\n    if forked\r\n      ActiveRecord::Base.establish_connection\r\n      ActiveRecord::Base.connection.pool.preconnect!\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nWith [Unicorn] in cluster-mode.\r\n\r\n```rb\r\n# ./config/initializers/unicorn.rb\r\nbefore_fork do |server, worker|\r\n  ActiveRecord::Base.connection.disconnect!\r\nend\r\n\r\nafter_fork do |server, worker|\r\n  ActiveRecord::Base.establish_connection\r\n  ActiveRecord::Base.connection.pool.preconnect!\r\nend\r\n```\r\n\r\nWith [Puma] in cluster-mode.\r\n\r\n```rb\r\n# ./config/initializers/puma.rb\r\non_worker_boot do\r\n  ActiveSupport.on_load(:active_record) do\r\n    ActiveRecord::Base.establish_connection\r\n    ActiveRecord::Base.connection.pool.preconnect!\r\n  end\r\nend\r\n```\r\n\r\nWith [Clockwork]:\r\n\r\n```rb\r\n# ./clock.rb\r\nrequire \"clockwork\"\r\nrequire_relative \"config/boot\"\r\nrequire_relative \"config/environment\"\r\n\r\nActiveRecord::Base.connection.pool.preconnect!\r\n\r\nmodule Clockwork\r\n  every(1.minute, \"do something\") do\r\n    MyWorker.perform_async\r\n  end\r\nend\r\n```\r\n\r\n### Verify \r\n\r\nVerify that this works:\r\n\r\n```rb\r\npool = ActiveRecord::Base.connection.pool\r\n\r\nputs \"#{pool.connections.count} connections established.\"\r\npool.preconnect!\r\nputs \"#{pool.connections.count} connections established.\"\r\n```\r\n\r\n\r\n### Author / License\r\n\r\nReleased under the [MIT License] by [Michael van Rooijen].\r\n\r\n[Postgres]: http://www.postgresql.org\r\n[Heroku]: https://www.heroku.com\r\n[PGBouncer]: https://pgbouncer.github.io\r\n[Sidekiq]: http://sidekiq.org\r\n[Passenger]: https://www.phusionpassenger.com\r\n[Unicorn]: http://unicorn.bogomips.org\r\n[Puma]: http://puma.io\r\n[Clockwork]: https://github.com/tomykaira/clockwork\r\n[process will hang indefinitely]: https://github.com/heroku/heroku-buildpack-pgbouncer/issues/29\r\n[MIT License]: https://github.com/meskyanichi/ar_preconnect/blob/master/LICENSE\r\n[Michael van Rooijen]: http://michael.vanrooijen.io\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}